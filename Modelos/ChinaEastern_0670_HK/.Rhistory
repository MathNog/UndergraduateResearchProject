plot(AdjClose_vec,main="AdjClose Latam 2010-2019",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose Latam 2010-2019",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2000)]
serie_2for=serie[c(2001:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2010-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Latam 2010-2019 - to fit')#lags relevantes para MA(q) ->
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Latam 2010-2019 - to fit')#lags relevantes para AR(p) ->
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0010=FitARMA(serie_ts_2fit, order = c(0,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1010=FitARMA(serie_ts_2fit, order = c(1,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0010=FitARMA(serie_ts_2fit, order = c(0,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1010=FitARMA(serie_ts_2fit, order = c(1,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit101)
print(fit101)
coef(fit001)
print(fit001)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res100=residuals.FitARMA(fit100)
res101=residuals.FitARMA(fit101)
plot(res100,main="Residuals of ARIMA(1,0,0)",type="l")
plot(res101,main="Residuals of ARIMA(1,0,1)",type="l")
mean(res100)
mean(res101)
Acf(res100,main="ACF for ARIMA(1,0,0) residuals'")
Acf(res101,main="ACF for ARIMA(1,0,1) residuals'")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Latam_LTMAQ")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="LTMAQ2000a2020.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Latam 2000-2020",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose Latam 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4700)]
serie_2for=serie[c(4701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2020 - to fit",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4700)]
serie_2for=serie[c(4701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2020 - to fit",type="l")
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4700)]
serie_2for=serie[c(4701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2020 - to fit",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4700)]
serie_2for=serie[c(4701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2020 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Latam 2000-2020 - to fit')#lags relevantes para MA(q) -> 1 e 8
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Latam 2000-2020 - to fit')#lags relevantes para AR(p) -> 1 e 8
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit800=FitARMA(serie_ts_2fit, order = c(8,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit008=FitARMA(serie_ts_2fit, order = c(0,0,8), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit108=FitARMA(serie_ts_2fit, order = c(1,0,8), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit800)
print(fit800)
coef(fit001)
print(fit001)
coef(fit008)
print(fit008)
coef(fit101)
print(fit101)
coef(fit108)
print(fit108)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res100=residuals.FitARMA(fit100)
res108=residuals.FitARMA(fit108)
plot(res100,main="Residuals of ARIMA(1,0,0)",type="l")
plot(res108,main="Residuals of ARIMA(1,0,8)",type="l")
Acf(res100,main="ACF for ARIMA(1,0,0) residuals'")
Acf(res108,main="ACF for ARIMA(1,0,8) residuals'")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Latam_LTMAQ")
#Leitura dos dados -> preços
arquivo=read.csv(file="LTMAQ2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Latam 2000-2007",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose Latam 2000-2007",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1700)]
serie_2for=serie[c(1701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2007 - to fit",type="l")
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1700)]
serie_2for=serie[c(1701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2007 - to fit",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1700)]
serie_2for=serie[c(1701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2000-2007 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Latam 2000-2007 - to fit')#lags relevantes para MA(q) -> 1 e 2
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Latam 2000-2007 - to fit')#lags relevantes para AR(p) -> 1 e 12
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit200=FitARMA(serie_ts_2fit, order = c(2,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0012=FitARMA(serie_ts_2fit, order = c(0,0,12), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1012=FitARMA(serie_ts_2fit, order = c(1,0,12), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit201=FitARMA(serie_ts_2fit, order = c(2,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit2012=FitARMA(serie_ts_2fit, order = c(2,0,12), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit200)
print(fit200)
coef(fit001)
print(fit001)
coef(fit0012)
print(fit0012)
coef(fit101)
print(fit101)
coef(fit1012)
print(fit1012)
coef(fit201)
print(fit201)
coef(fit2012)
print(fit2012)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res2012=residuals.FitARMA(fit2012)
res100=residuals.FitARMA(fit100)
plot(res2012,main="Residuals of ARIMA(2,0,12)",type="l")
plot(res100,main="Residuals of ARIMA(1,0,0)",type="l")
Acf(res2012,main="ACF for ARIMA(2,0,12) residuals'")
Acf(res100,main="ACF for ARIMA(1,0,0) residuals'")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Latam_LTMAQ")
#Leitura dos dados -> preços
arquivo=read.csv(file="LTMAQ2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Latam 2000-2007",type="l")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Latam_LTMAQ")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="LTMAQ2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Latam 2010-2019",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose Latam 2010-2019",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2000)]
serie_2for=serie[c(2001:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Latam 2010-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Latam 2010-2019 - to fit')#lags relevantes para MA(q) -> 1
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Latam 2010-2019 - to fit')#lags relevantes para AR(p) -> 1 e 10
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit101)
print(fit101)
coef(fit001)
print(fit001)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res100=residuals.FitARMA(fit100)
res101=residuals.FitARMA(fit101)
plot(res100,main="Residuals of ARIMA(1,0,0)",type="l")
plot(res101,main="Residuals of ARIMA(1,0,1)",type="l")
Acf(res100,main="ACF for ARIMA(1,0,0) residuals'")
Acf(res101,main="ACF for ARIMA(1,0,1) residuals'")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/ChinaEastern_0670_HK")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="0670_HK2000a2020.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose China Eastern 2000 a 2020",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose China Eastern 2000 a 2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4146)]
serie_2for=serie[c(4147:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Eastern 2000 a 2020 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose China Eastern 2000 a 2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4146)]
serie_2for=serie[c(4147:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Eastern 2000 a 2020 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Eastern 2000 a 2020 - to fit')#lags relevantes para MA(q) -> 1
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose China Eastern 2000 a 2020 - to fit')#lags relevantes para AR(p) -> 1 e 2
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit002=FitARMA(serie_ts_2fit, order = c(0,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit102=FitARMA(serie_ts_2fit, order = c(1,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit001)
print(fit001)
coef(fit002)
print(fit002)
coef(fit101)
print(fit101)
coef(fit102)
print(fit102)
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose China Eastern 2000 a 2020",type="l")
getwd()
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit002=FitARMA(serie_ts_2fit, order = c(0,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit102=FitARMA(serie_ts_2fit, order = c(1,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res101=residuals.FitARMA(fit101)
res001=residuals.FitARMA(fit001)
res102=residuals.FitARMA(fit102)
plot(res101,main="Residuals of ARIMA(1,0,1)",type="l")
plot(res001,main="Residuals of ARIMA(0,0,1)",type="l")
plot(res102,main="Residuals of ARIMA(1,0,2)",type="l")
Acf(res101,main="ACF for ARIMA(1,0,1) residuals'")
Acf(res001,main="ACF for ARIMA(0,0,1) residuals'")
Acf(res102,main="ACF for ARIMA(1,0,2) residuals'")
plot(res101,main="Residuals of ARIMA(1,0,1)",type="l")
plot(res001,main="Residuals of ARIMA(0,0,1)",type="l")
plot(res102,main="Residuals of ARIMA(1,0,2)",type="l")
Acf(res101,main="ACF for ARIMA(1,0,1) residuals'")#decente
Acf(res001,main="ACF for ARIMA(0,0,1) residuals'")#decente
Acf(res102,main="ACF for ARIMA(1,0,2) residuals'")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/ChinaEastern_0670_HK")
#Leitura dos dados -> preços
arquivo=read.csv(file="0670_HK2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose China Eastern 2000 a 2007",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose China Eastern 2000 a 2007",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1700)]
serie_2for=serie[c(1701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Eastern 2000 a 2007 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Eastern 2000 a 2007 - to fit')#lags relevantes para MA(q) -> 2
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit200=FitARMA(serie_ts_2fit, order = c(2,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit002=FitARMA(serie_ts_2fit, order = c(0,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit008=FitARMA(serie_ts_2fit, order = c(0,0,8), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit202=FitARMA(serie_ts_2fit, order = c(2,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit208=FitARMA(serie_ts_2fit, order = c(2,0,8), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit800=FitARMA(serie_ts_2fit, order = c(8,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit802=FitARMA(serie_ts_2fit, order = c(8,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit202=FitARMA(serie_ts_2fit, order = c(2,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit208=FitARMA(serie_ts_2fit, order = c(2,0,8), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit800=FitARMA(serie_ts_2fit, order = c(8,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit802=FitARMA(serie_ts_2fit, order = c(8,0,2), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit808=FitARMA(serie_ts_2fit, order = c(8,0,8), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit200)
print(fit200)
coef(fit002)
print(fit002)
coef(fit008)
print(fit008)
coef(fit202)
print(fit202)
coef(fit208)
print(fit208)
coef(fit800)
print(fit800)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res008=residuals.FitARMA(fit008)
res208=residuals.FitARMA(fit208)
res800=residuals.FitARMA(fit800)
plot(res008,main="Residuals of ARIMA(0,0,8)",type="l")
plot(res208,main="Residuals of ARIMA(2,0,8)",type="l")
plot(res800,main="Residuals of ARIMA(8,0,0)",type="l")
Acf(res008,main="ACF for ARIMA(0,0,8) residuals'")
Acf(res208,main="ACF for ARIMA(2,0,8) residuals'")
Acf(res800,main="ACF for ARIMA(8,0,0) residuals'")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/ChinaEastern_0670_HK")
#Leitura dos dados -> preços
arquivo=read.csv(file="0670_HK2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose China Eastern 2010-2019",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose China Eastern 2010-2019",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Eastern 2010-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#ACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Eastern 2010-2019 - to fit')#lags relevantes para MA(q) -> 1
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose China Eastern 2010-2019 - to fit')#lags relevantes para AR(p) -> 1
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit001)
print(fit001)
coef(fit101)
print(fit101)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res101=residuals.FitARMA(fit101)
res001=residuals.FitARMA(fit001)
plot(res101,main="Residuals of ARIMA(1,0,1)",type="l")
plot(res001,main="Residuals of ARIMA(0,0,1)",type="l")
mean(res101)
mean(res001)
Acf(res101,main="ACF for ARIMA(1,0,1) residuals'")#lag 16 relevante
Acf(res001,main="ACF for ARIMA(0,0,1) residuals'")#lag 16 relevante
