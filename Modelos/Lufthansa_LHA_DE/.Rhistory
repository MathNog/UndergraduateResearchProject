library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/ChinaSouthern_1055_HK")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="1055_HK2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose China Southern 2010-2019",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose China Southern 2010-2019",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Southern 2010-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Southern 2010-2019 - to fit')#lags relevantes para MA(q) -> 1, 7 e 10
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose China Southern 2010-2019 - to fit')#lags relevantes para AR(p) -> 1 e 10
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/ChinaEastern_0670_HK")
#Leitura dos dados -> preços
arquivo=read.csv(file="0670_HK2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose China Eastern 2000 a 2007",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose China Eastern 2000 a 2007",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1700)]
serie_2for=serie[c(1701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Eastern 2000 a 2007 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Eastern 2000 a 2007 - to fit')#lags relevantes para MA(q) -> 2 e 8
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose China Eastern 2000 a 2007 - to fit')#lags relevantes para AR(p) -> 2 e 8
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Eastern 2000 a 2007 - to fit')#lags relevantes para MA(q) -> 2 e 8
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/AirFranceKLM_AF_PA")
#Leitura dos dados
arquivo=read.csv(file="AF_PA2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2007",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2007 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2007 - to fit')#lags relevantes para MA(q) -> 1, 6 e 7
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2007 - to fit')#lags relevantes para AR(p) -> 1, 6, 7
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/IAG_IAG_L")
#Leitura dos dados
arquivo=read.csv(file="IAG_L2003a2020.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose IAG 2003-2020",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose IAG 2003-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose IAG 2003-2020",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose IAG 2003-2020')#lags relevantes para MA(q) -> 1, 6 e 7
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose IAG 2003-2020')#lags relevantes para AR(p) -> 1, 6, 7
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose IAG 2003-2020')#lags relevantes para MA(q) -> 1, 6 e 7
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose IAG 2003-2020')#lags relevantes para AR(p) -> 1, 6, 7
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/IAG_IAG_L")
#Leitura dos dados
arquivo=read.csv(file="IAG_L2003a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose IAG 2003-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose IAG 2003-2007",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose IAG 2003-2007",type="l")
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:100)]
serie_2for=serie[c(1001:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose IAG 2003-2007",type="l")
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1000)]
serie_2for=serie[c(1001:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose IAG 2003-2007",type="l")
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose IAG 2003-2007",type="l")
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose IAG 2003-2007",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose IAG 2003-2007')#lags relevantes para MA(q) -> 1, 6 e 7
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose IAG 2003-2007')#lags relevantes para AR(p) -> 1, 6, 7
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/IAG_IAG_L")
#Leitura dos dados
arquivo=read.csv(file="IAG_L2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose IAG 2010-2019",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose IAG 2010-2019",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose IAG 2010-2019",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose IAG 2010-2019')#lags relevantes para MA(q) -> 1, 6 e 7
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjCloseIAG 2010-2019')#lags relevantes para AR(p) -> 1, 6, 7
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1100=FitARMA(serie_ts_2fit, order = c(11,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit011=FitARMA(serie_ts_2fit, order = c(0,0,11), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1011=FitARMA(serie_ts_2fit, order = c(1,0,11), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1101=FitARMA(serie_ts_2fit, order = c(11,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit11011=FitARMA(serie_ts_2fit, order = c(11,0,11), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0011=FitARMA(serie_ts_2fit, order = c(0,0,11), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit001)
print(fit001)
coef(fit1100)
print(fit1100)
coef(fit0011)
print(fit0011)
coef(fit101)
print(fit101)
coef(fit1011)
print(fit1011)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res1100=residuals.FitARMA(fit1100)
res001=residuals.FitARMA(fit001)
plot(res1100,main="Residuals of ARIMA(11,0,0) IAG 2010-2019",type="l")
plot(res001,main="Residuals of ARIMA(0,0,1) IAG 2010-2019",type="l")
mean(res1100)
mean(res001)
Acf(res1100,main="ACF for ARIMA(11,0,0) IAG 2010-2019 residuals")#bom
Acf(res001,main="ACF for ARIMA(0,0,1) IAG 2010-2019 residuals")#bom
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="LHA_DE2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Lufthansa 2000-2007",type="l")
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Lufthansa 2010-2019",type="l")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="LHA_DE2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/AdjClose_Luft_10a19.jpeg",width = 658, height = 553)
plot(AdjClose_vec,main="AdjClose Lufthansa 2010-2019",type="l")
dev.off()
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/LogRet_Luft_10a19.jpeg",width = 658, height = 553)
plot(logret,main="Log-return AdjClose Lufthansa 2010-2019",type="l")
dev.off()
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/Serie_Luft_10a19.jpeg",width = 658, height = 553)
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Lufthansa 2010-2019 - to fit",type="l")
dev.off()
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#p-value = 0.01 -> logo há 1% de chance da série apresentar raiz unitária -> a série é estacionária -> d=0
#PACF e PACF para determinar ordem
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/ACF_Luft_10a19.jpeg",width = 658, height = 553)
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Lufthansa 2010-2019 - to fit')#lags relevantes para MA(q) -> 4 e 11
dev.off()
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/PACF_Luft_10a19.jpeg",width = 658, height = 553)
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Lufthansa 2010-2019 - to fit')#lags relevantes para AR(p) -> 4 e 11
dev.off()
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit400=FitARMA(serie_ts_2fit, order = c(4,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1100=FitARMA(serie_ts_2fit, order = c(11,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit004=FitARMA(serie_ts_2fit, order = c(0,0,4), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0011=FitARMA(serie_ts_2fit, order = c(0,0,11), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit400)
print(fit400)
coef(fit1100)
print(fit1100)
coef(fit004)
print(fit004)
coef(fit0011)
print(fit0011)
#Modelos com menores AIC, BIC e maior loglikelihood: (4,0,0); (4,0,0); (11,0,0)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res400=residuals.FitARMA(fit400)
res1100=residuals.FitARMA(fit1100)
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/Res(4,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
plot(res400,main="Residuals of ARIMA(4,0,0)",type="l")
dev.off()
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/Res(11,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
plot(res1100,main="Residuals of ARIMA(11,0,0)",type="l")
dev.off()
mean(res400)
mean(res1100)
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/ACFRes(4,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
Acf(res400,main="ACF for ARIMA(4,0,0) residuals'")
de.off()
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/ACFRes(11,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
Acf(res1100,main="ACF for ARIMA(11,0,0) residuals'")
dev.off()
#Média próxima de zero, resíduos não correlacionados -> parece
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="LHA_DE2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/AdjClose_Luft_10a19.jpeg",width = 658, height = 553)
plot(AdjClose_vec,main="AdjClose Lufthansa 2010-2019",type="l")
dev.off()
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/LogRet_Luft_10a19.jpeg",width = 658, height = 553)
plot(logret,main="Log-return AdjClose Lufthansa 2010-2019",type="l")
dev.off()
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/Serie_Luft_10a19.jpeg",width = 658, height = 553)
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Lufthansa 2010-2019 - to fit",type="l")
dev.off()
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#p-value = 0.01 -> logo há 1% de chance da série apresentar raiz unitária -> a série é estacionária -> d=0
#PACF e PACF para determinar ordem
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/ACF_Luft_10a19.jpeg",width = 658, height = 553)
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Lufthansa 2010-2019 - to fit')#lags relevantes para MA(q) -> 4 e 11
dev.off()
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/PACF_Luft_10a19.jpeg",width = 658, height = 553)
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Lufthansa 2010-2019 - to fit')#lags relevantes para AR(p) -> 4 e 11
dev.off()
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit400=FitARMA(serie_ts_2fit, order = c(4,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1100=FitARMA(serie_ts_2fit, order = c(11,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit004=FitARMA(serie_ts_2fit, order = c(0,0,4), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0011=FitARMA(serie_ts_2fit, order = c(0,0,11), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit400)
print(fit400)
coef(fit1100)
print(fit1100)
coef(fit004)
print(fit004)
coef(fit0011)
print(fit0011)
#Modelos com menores AIC, BIC e maior loglikelihood: (4,0,0); (4,0,0); (11,0,0)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res400=residuals.FitARMA(fit400)
res1100=residuals.FitARMA(fit1100)
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/Res(4,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
plot(res400,main="Residuals of ARIMA(4,0,0)",type="l")
dev.off()
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/Res(11,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
plot(res1100,main="Residuals of ARIMA(11,0,0)",type="l")
dev.off()
mean(res400)
mean(res1100)
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/ACFRes(4,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
Acf(res400,main="ACF for ARIMA(4,0,0) residuals'")
dev.off()
jpeg(file="C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Lufthansa_LHA_DE/Dados_10a19/ACFRes(11,0,0)_Luft_10a19.jpeg",width = 658, height = 553)
Acf(res1100,main="ACF for ARIMA(11,0,0) residuals'")
dev.off()
#Média próxima de zero, resíduos não correlacionados -> parece
