serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose China Southern 2010-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose China Southern 2010-2019 - to fit')#lags relevantes para MA(q) -> 1 e 10
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose China Southern 2010-2019 - to fit')#lags relevantes para AR(p) -> 1 e 10
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1000=FitARMA(serie_ts_2fit, order = c(10,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit0010=FitARMA(serie_ts_2fit, order = c(0,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit1010=FitARMA(serie_ts_2fit, order = c(1,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit700=FitARMA(serie_ts_2fit, order = c(7,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit701=FitARMA(serie_ts_2fit, order = c(7,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit7010=FitARMA(serie_ts_2fit, order = c(7,0,10), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
coef(fit100)
print(fit100)
coef(fit1000)
print(fit1000)
coef(fit001)
print(fit001)
coef(fit0010)
print(fit0010)
coef(fit101)
print(fit101)
coef(fit1010)
print(fit1010)
coef(fit700)
print(fit700)
coef(fit701)
print(fit701)
plot(res100,main="Residuals of ARIMA(1,0,0) ChinaSouthern 2010-2019",type="l")
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res100=residuals.FitARMA(fit100)
res001=residuals.FitARMA(fit001)
res1000=residuals.FitARMA(fit1000)
plot(res100,main="Residuals of ARIMA(1,0,0) ChinaSouthern 2010-2019",type="l")
plot(res001,main="Residuals of ARIMA(0,0,1) ChinaSouthern 2010-2019",type="l")
plot(res1000,main="Residuals of ARIMA(10,0,0) ChinaSouthern 2010-2019",type="l")
Acf(res100,main="ACF for ARIMA(1,0,0) ChinaSouthern 2010-2019 residuals")
Acf(res100,main="ACF for ARIMA(1,0,0) ChinaSouthern 2010-2019 residuals")#nao mt bom
Acf(res001,main="ACF for ARIMA(0,0,1) ChinaSouthern 2010-2019 residuals")
Acf(res1000,main="ACF for ARIMA(10,0,0) ChinaSouthern 2010-2019 residuals")
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/AirFranceKLM_AF_PA")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="AF_PA_2000a2020.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2020",type="l")
head(arquivo)
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2020",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para MA(q) -> 1 e 11
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para AR(p) -> 1 e 11
adf.test(AdjClose_vec,alternative = "stationary")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para MA(q) -> 6
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para AR(p) -> 6
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit600=FitARMA(serie_ts_2fit, order = c(6,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit006=FitARMA(serie_ts_2fit, order = c(0,0,6), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit606=FitARMA(serie_ts_2fit, order = c(6,0,6), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit600)
print(fit600)
coef(fit006)
print(fit006)
coef(fit606)
print(fit606)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res006=residuals.FitARMA(fit006)
res606=residuals.FitARMA(fit606)
plot(res006,main="Residuals of ARIMA(1,0,0)",type="l")
plot(res606,main="Residuals of ARIMA(1,0,1)",type="l")
mean(res006)
mean(res606)
Acf(res006,main="ACF for ARIMA(1,0,0) residuals'")#lag 11 grande
Acf(res606,main="ACF for ARIMA(1,0,1) residuals'")#lag 11 grande
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res006=residuals.FitARMA(fit006)
res606=residuals.FitARMA(fit606)
plot(res006,main="Residuals of ARIMA(0,0,6) AirFrance-KLM 2000-2020",type="l")
plot(res606,main="Residuals of ARIMA(6,0,6) AirFrance-KLM 2000-2020",type="l")
mean(res006)
mean(res606)
Acf(res006,main="ACF for ARIMA(0,0,6) AirFrance-KLM 2000-2020 residuals'")#lag 11 grande
Acf(res606,main="ACF for ARIMA(6,0,6) AirFrance-KLM 2000-2020 residuals'")#lag 11 grande
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/AirFranceKLM_AF_PA")
#Leitura dos dados
arquivo=read.csv(file="AF_PA2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=AdjClose_vec[!is.na(logret)]
logret=AdjClose_vec[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Leitura dos dados -> preços BOEING
arquivo=read.csv(file="AF_PA_2000a2020.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2020",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Leitura dos dados
arquivo=read.csv(file="AF_PA2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=AdjClose_vec[!is.na(logret)]
logret=AdjClose_vec[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
library(forecast)
library(tseries)
library(FitARMA)
#Leitura dos dados
arquivo=read.csv(file="AF_PA2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para MA(q) -> 1 e 11
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/AirFranceKLM_AF_PA")
#Leitura dos dados
arquivo=read.csv(file="AF_PA2000a2007.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2000-2007",type="l")
#Para obter o log-return a partir dos preços -> limpar NaNs
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseBA_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2007",type="l")
#Colocando BA_logret em uma variável do tipo TimeS eries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:1800)]
serie_2for=serie[c(1801:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2007 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2007 - to fit')#lags relevantes para MA(q) -> 1 e 11
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2007 - to fit')#lags relevantes para AR(p) -> 1,
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit600=FitARMA(serie_ts_2fit, order = c(6,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit006=FitARMA(serie_ts_2fit, order = c(0,0,6), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit700=FitARMA(serie_ts_2fit, order = c(7,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit007=FitARMA(serie_ts_2fit, order = c(0,0,7), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit106=FitARMA(serie_ts_2fit, order = c(1,0,6), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit107=FitARMA(serie_ts_2fit, order = c(1,0,7), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit601=FitARMA(serie_ts_2fit, order = c(6,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit606=FitARMA(serie_ts_2fit, order = c(6,0,6), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit607=FitARMA(serie_ts_2fit, order = c(6,0,7), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit701=FitARMA(serie_ts_2fit, order = c(7,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit706=FitARMA(serie_ts_2fit, order = c(7,0,6), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit707=FitARMA(serie_ts_2fit, order = c(7,0,7), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
coef(fit100)
print(fit100)
coef(fit001)
print(fit001)
coef(fit600)
print(fit600)
coef(fit006)
print(fit006)
coef(fit700)
print(fit700)
coef(fit007)
print(fit007)
coef(fit101)
print(fit101)
coef(fit106)
print(fit106)
coef(fit107)
print(fit107)
coef(fit601)
print(fit601)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res100=residuals.FitARMA(fit100)
res107=residuals.FitARMA(fit107)
res007=residuals.FitARMA(fit007)
plot(res100,main="Residuals of ARIMA(1,0,0) AirFrance-KLM 2000-2007",type="l")
plot(res107,main="Residuals of ARIMA(1,0,7) AirFrance-KLM 2000-2007",type="l")
plot(res007,main="Residuals of ARIMA(0,0,7) AirFrance-KLM 2000-2007",type="l")
mean(res100)
mean(res107)
mean(res007)
Acf(res100,main="ACF for ARIMA(1,0,0) AirFrance-KLM 2000-2007 residuals")#lag 11 grande
Acf(res100,main="ACF for ARIMA(1,0,0) AirFrance-KLM 2000-2007 residuals")#nao mt bom
Acf(res107,main="ACF for ARIMA(1,0,7) AirFrance-KLM 2000-2007 residuals")#lag 11 grande
Acf(res107,main="ACF for ARIMA(1,0,7) AirFrance-KLM 2000-2007 residuals")#bom
Acf(res007,main="ACF for ARIMA(0,0,7) AirFrance-KLM 2000-2007 residuals")#lag 11 grande
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/AirFranceKLM_AF_PA")
#Leitura dos dados -> preços
arquivo=read.csv(file="AF_PA2010a2019.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose AirFrance-KLM 2010-2019",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose AirFrance-KLM 2000-2019",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:2100)]
serie_2for=serie[c(2101:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para MA(q) -> 1 e 11
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para AR(p) -> 1 e 11
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit",type="l")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para MA(q) -> 1 e 11
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose AirFrance-KLM 2000-2019 - to fit')#lags relevantes para AR(p) -> 1 e 11
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit001=FitARMA(serie_ts_2fit, order = c(0,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
fit101=FitARMA(serie_ts_2fit, order = c(1,0,1), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#coeficientes dos modelos
coef(fit100)
print(fit100)
coef(fit001)
print(fit001)
coef(fit101)
print(fit101)
#Vejamos os resíduos, suas médias e acf dos melhores modelos
res100=residuals.FitARMA(fit100)
res101=residuals.FitARMA(fit101)
plot(res100,main="Residuals of ARIMA(1,0,0)",type="l")
plot(res101,main="Residuals of ARIMA(1,0,1)",type="l")
plot(res100,main="Residuals of ARIMA(1,0,0) AirFrance-KLM 2000-2019",type="l")
plot(res101,main="Residuals of ARIMA(1,0,1) AirFrance-KLM 2000-2019",type="l")
mean(res100)
mean(res101)
Acf(res100,main="ACF for ARIMA(1,0,0) AirFrance-KLM 2000-2019 residuals'")#lag 11 grande
Acf(res101,main="ACF for ARIMA(1,0,1) AirFrance-KLM 2000-2019 residuals'")#lag 11 grande
library(forecast)
library(tseries)
library(FitARMA)
#Setar diretório correto
setwd("C:/Users/Matheus/Desktop/PUC/IC/CiasAereas/Modelos/Japan_9201_T")
#Leitura dos dados -> preços
arquivo=read.csv(file="9201_T2000a2020.csv")
#Selecionando apenas o AdjClose -> podemos ignorar os outros
AdjClose=arquivo[c(6)]
#Convertendo para numeric a fim de limpar NA e NAN
AdjClose_vec=as.numeric(t(AdjClose))
AdjClose_vec=AdjClose_vec[!is.na(AdjClose_vec)]
AdjClose_vec=AdjClose_vec[!is.nan(AdjClose_vec)]
#Vizualização dos dados originais
plot(AdjClose_vec,main="AdjClose Japan Airlines 2000-2020",type="l")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose Japan Airlines 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4700)]
serie_2for=serie[c(4701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Japan Airlines 2000-2020 - to fit",type="l")
#dickey fuller test para estacionaridade
adf.test(serie_ts_2fit, alternative = "stationary")
#Para obter o log-return a partir dos preços
#Temos que, o retorno rt = ln(Pt)-ln(Pt-1), ou seja, a diferença do log do preço atual e do log do preço em t-1.
#A função diff retorna justamente AdjCloseserie_vec[t]-AdjCloseBA_vec[t-1]
logret=diff(log(AdjClose_vec),lag=1)
logret=logret[!is.na(logret)]
logret=logret[!is.nan(logret)]
#Para vizualizar o retorno, não o preço
plot(logret,main="Log-return AdjClose Japan Airlines 2000-2020",type="l")
#Colocando BA_logret em uma variável do tipo TimeSeries
serie=ts(logret)
serie=tsclean(serie)
#Separando a serie em uma parte para ajuste do modelo e outra para comparação com previsão
serie_2fit=serie[c(1:4700)]
serie_2for=serie[c(4701:length(serie))]
serie_ts_2fit=ts(serie_2fit)
serie_ts_2for=ts(serie_2for)
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Japan Airlines 2000-2020 - to fit",type="l")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Japan Airlines 2000-2020 - to fit')#lags relevantes para MA(q) ->
#Plot da série separada para ajuste
plot(serie_ts_2fit,main="Serie Temporal Log-return AdjClose Japan Airlines 2000-2020 - to fit",type="l")
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Japan Airlines 2000-2020 - to fit')#lags relevantes para MA(q) ->
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Japan Airlines 2000-2007 - to fit')#lags relevantes para AR(p) ->
#PACF e PACF para determinar ordem
Acf(serie_ts_2fit,main='ACF Serie Temporal Log-return AdjClose Japan Airlines 2000-2020 - to fit')#lags relevantes para MA(q) ->
Pacf(serie_ts_2fit,main='PACF Serie Temporal Log-return AdjClose Japan Airlines 2000-2007 - to fit')#lags relevantes para AR(p) ->
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
#Ajustando com base nas ACF e PACF -> classe FitARMA
fit100=FitARMA(serie_ts_2fit, order = c(1,0,0), demean=TRUE, MeanMLEQ = FALSE,pApprox = 30, MaxLag = 30)
